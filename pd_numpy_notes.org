#+TITLE: Test

* org src blocks for testing

** calculate exp growth

#+begin_src python :results file
import numpy as np
import matplotlib.pyplot as plt

def calcYearReturn(startVal, years, interest, contribution):
    """
    Values:
    starVal      - Money in dollars of initial value
    years        - Integer number of years to run the calculation
    interest     - Annual compounding whole number percent
    contribution - Annual contribution to invested value
    """
    x = np.arange(1,years+1)
    y = np.zeros(years)
    y[0] = startVal

    interestMethod = (1.0+interest/100.0)

    # running sum of interest with contribution
    for yr in range(1, years):
        y[yr] = (y[yr-1] + contribution)*interestMethod
    return y

# hard code values
vals = [2.8e6, 0.3e6]
names = ["Palo Alto", "Austin"]
colors = ["green", "pink"]
strategies = ["Interest Only", "Savings and Interest"]
startVal = 1e5
years = 70
interest = 5.0 # percent
contribution = 12000 # max roth IRA for two people
fig, ax = plt.subplots()
plt.xlabel('Year')
plt.ylabel('Money in Mega Dollars')

# maths
x = np.arange(1,years+1)
y = np.array([startVal*((1.0+interest/100.0)**(yr-1)) for yr in x])
y_val = calcYearReturn(startVal, years, interest, contribution)

# every investment strategy and every city
for i, val in enumerate(vals):
    p = ax.axhline(val, color=f"{colors[i]}", label=f"{names[i]}")
for i, method in enumerate((y, y_val)):
    yr = np.argmax(method>max(vals))
    interestOnly = ax.plot(x[:yr+1],method[:yr+1], label=f"{strategies[i]}")
leg = ax.legend()

# returns
plt.savefig('exp.png')
return 'exp.png'
#+end_src

#+RESULTS:
[[file:exp.png]]

** geo data

[[https://github.com/andrea-cuttone/geoplotlib/wiki/User-Guide][github link for the geoplotlib]]

Need the data from the github to download it here
#+begin_src shell
wget https://raw.githubusercontent.com/andrea-cuttone/geoplotlib/master/examples/data/opencellid_dk.csv
#+end_src

Now we can look at the data
#+begin_src python
import geoplotlib
from geoplotlib.utils import read_csv, BoundingBox
data = read_csv('opencellid_dk.csv')
geoplotlib.hist(data, colorscale='sqrt', binsize=8)
geoplotlib.set_bbox(BoundingBox.DK)
geoplotlib.show()
#+end_src

** zillow csv data

getting good at the things we want to be good at

*** using csv reader

#+begin_src python :results output :session zsv
import csv
filename = "ZillowData.csv"
with open(filename, newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',')
    for i, row in enumerate(spamreader):
        if i==0:
            print(row)
        if len(row) != 309:
            print(f"index {i} does not have 309 entries")
#+end_src

#+RESULTS:
: ['RegionID', 'SizeRank', 'RegionName', 'RegionType', 'StateName', '1996-01-31', '1996-02-29', '1996-03-31', '1996-04-30', '1996-05-31', '1996-06-30', '1996-07-31', '1996-08-31', '1996-09-30', '1996-10-31', '1996-11-30', '1996-12-31', '1997-01-31', '1997-02-28', '1997-03-31', '1997-04-30', '1997-05-31', '1997-06-30', '1997-07-31', '1997-08-31', '1997-09-30', '1997-10-31', '1997-11-30', '1997-12-31', '1998-01-31', '1998-02-28', '1998-03-31', '1998-04-30', '1998-05-31', '1998-06-30', '1998-07-31', '1998-08-31', '1998-09-30', '1998-10-31', '1998-11-30', '1998-12-31', '1999-01-31', '1999-02-28', '1999-03-31', '1999-04-30', '1999-05-31', '1999-06-30', '1999-07-31', '1999-08-31', '1999-09-30', '1999-10-31', '1999-11-30', '1999-12-31', '2000-01-31', '2000-02-29', '2000-03-31', '2000-04-30', '2000-05-31', '2000-06-30', '2000-07-31', '2000-08-31', '2000-09-30', '2000-10-31', '2000-11-30', '2000-12-31', '2001-01-31', '2001-02-28', '2001-03-31', '2001-04-30', '2001-05-31', '2001-06-30', '2001-07-31', '2001-08-31', '2001-09-30', '2001-10-31', '2001-11-30', '2001-12-31', '2002-01-31', '2002-02-28', '2002-03-31', '2002-04-30', '2002-05-31', '2002-06-30', '2002-07-31', '2002-08-31', '2002-09-30', '2002-10-31', '2002-11-30', '2002-12-31', '2003-01-31', '2003-02-28', '2003-03-31', '2003-04-30', '2003-05-31', '2003-06-30', '2003-07-31', '2003-08-31', '2003-09-30', '2003-10-31', '2003-11-30', '2003-12-31', '2004-01-31', '2004-02-29', '2004-03-31', '2004-04-30', '2004-05-31', '2004-06-30', '2004-07-31', '2004-08-31', '2004-09-30', '2004-10-31', '2004-11-30', '2004-12-31', '2005-01-31', '2005-02-28', '2005-03-31', '2005-04-30', '2005-05-31', '2005-06-30', '2005-07-31', '2005-08-31', '2005-09-30', '2005-10-31', '2005-11-30', '2005-12-31', '2006-01-31', '2006-02-28', '2006-03-31', '2006-04-30', '2006-05-31', '2006-06-30', '2006-07-31', '2006-08-31', '2006-09-30', '2006-10-31', '2006-11-30', '2006-12-31', '2007-01-31', '2007-02-28', '2007-03-31', '2007-04-30', '2007-05-31', '2007-06-30', '2007-07-31', '2007-08-31', '2007-09-30', '2007-10-31', '2007-11-30', '2007-12-31', '2008-01-31', '2008-02-29', '2008-03-31', '2008-04-30', '2008-05-31', '2008-06-30', '2008-07-31', '2008-08-31', '2008-09-30', '2008-10-31', '2008-11-30', '2008-12-31', '2009-01-31', '2009-02-28', '2009-03-31', '2009-04-30', '2009-05-31', '2009-06-30', '2009-07-31', '2009-08-31', '2009-09-30', '2009-10-31', '2009-11-30', '2009-12-31', '2010-01-31', '2010-02-28', '2010-03-31', '2010-04-30', '2010-05-31', '2010-06-30', '2010-07-31', '2010-08-31', '2010-09-30', '2010-10-31', '2010-11-30', '2010-12-31', '2011-01-31', '2011-02-28', '2011-03-31', '2011-04-30', '2011-05-31', '2011-06-30', '2011-07-31', '2011-08-31', '2011-09-30', '2011-10-31', '2011-11-30', '2011-12-31', '2012-01-31', '2012-02-29', '2012-03-31', '2012-04-30', '2012-05-31', '2012-06-30', '2012-07-31', '2012-08-31', '2012-09-30', '2012-10-31', '2012-11-30', '2012-12-31', '2013-01-31', '2013-02-28', '2013-03-31', '2013-04-30', '2013-05-31', '2013-06-30', '2013-07-31', '2013-08-31', '2013-09-30', '2013-10-31', '2013-11-30', '2013-12-31', '2014-01-31', '2014-02-28', '2014-03-31', '2014-04-30', '2014-05-31', '2014-06-30', '2014-07-31', '2014-08-31', '2014-09-30', '2014-10-31', '2014-11-30', '2014-12-31', '2015-01-31', '2015-02-28', '2015-03-31', '2015-04-30', '2015-05-31', '2015-06-30', '2015-07-31', '2015-08-31', '2015-09-30', '2015-10-31', '2015-11-30', '2015-12-31', '2016-01-31', '2016-02-29', '2016-03-31', '2016-04-30', '2016-05-31', '2016-06-30', '2016-07-31', '2016-08-31', '2016-09-30', '2016-10-31', '2016-11-30', '2016-12-31', '2017-01-31', '2017-02-28', '2017-03-31', '2017-04-30', '2017-05-31', '2017-06-30', '2017-07-31', '2017-08-31', '2017-09-30', '2017-10-31', '2017-11-30', '2017-12-31', '2018-01-31', '2018-02-28', '2018-03-31', '2018-04-30', '2018-05-31', '2018-06-30', '2018-07-31', '2018-08-31', '2018-09-30', '2018-10-31', '2018-11-30', '2018-12-31', '2019-01-31', '2019-02-28', '2019-03-31', '2019-04-30', '2019-05-31', '2019-06-30', '2019-07-31', '2019-08-31', '2019-09-30', '2019-10-31', '2019-11-30', '2019-12-31', '2020-01-31', '2020-02-29', '2020-03-31', '2020-04-30', '2020-05-31', '2020-06-30', '2020-07-31', '2020-08-31', '2020-09-30', '2020-10-31', '2020-11-30', '2020-12-31', '2021-01-31', '2021-02-28', '2021-03-31', '2021-04-30']

*** using pandas

#+begin_src python :results output
import pandas as pd
import numpy as np
filename = "ZillowData.csv"

# put this data into a dataframe
df = pd.read_csv(filename)

# all citites and regions
regions = np.array(set(df['RegionName']))
states = np.array(set(df['StateName']))
region_type = np.array(set(df['RegionType']))

# specific city
florida_cities = df[df['StateName'] == "FL"]
print(florida_cities['RegionName'])


# print(states)
#+end_src

#+RESULTS:
#+begin_example
8                   Miami-Fort Lauderdale, FL
19                                  Tampa, FL
27                                Orlando, FL
40                           Jacksonville, FL
75          North Port-Sarasota-Bradenton, FL
84                             Fort Myers, FL
88                               Lakeland, FL
90                          Daytona Beach, FL
97                              Melbourne, FL
110                             Pensacola, FL
119                        Port St. Lucie, FL
140                           Tallahassee, FL
149                                 Ocala, FL
151                                Naples, FL
170                           Gainesville, FL
187    Crestview-Fort Walton Beach-Destin, FL
226                           Panama City, FL
251                           Punta Gorda, FL
289                     Homosassa Springs, FL
295                            Vero Beach, FL
382                               Sebring, FL
399                          The Villages, FL
463                               Palatka, FL
467                              Key West, FL
486                             Lake City, FL
692                            Okeechobee, FL
700                             Clewiston, FL
760                               Arcadia, FL
823                              Wauchula, FL
Name: RegionName, dtype: object
#+end_example

#+begin_src python :results file
import pandas as pd
filename = "ZillowData.csv"

# put this data into a dataframe
df = pd.read_csv(filename)
states = df['StateName']
fl_cities = df[states=='FL']
ax = fl_cities.plot.bar(y='2020-12-31', rot=0)

# returns
fig = ax.get_figure()
fig.savefig('zillow.png')
return 'zillow.png'
#+end_src

#+begin_src python :results file
import pandas as pd
filename = "ZillowData.csv"

# put this data into a dataframe
df = pd.read_csv(filename)
df2 = df.loc[1]
df2 = df2.iloc[5:]
ax = df2.plot()

# returns
fig = ax.get_figure()
fig.savefig('zillowData.png')
return 'zillowData.png'

#+end_src

#+RESULTS:
[[file:zillowData.png]]

#+begin_src python :results file
import pandas as pd
filename = "ZillowData.csv"

# put this data into a dataframe
df = pd.read_csv(filename)
ax = df.plot.pie(y='RegionID')

# returns
fig = ax.get_figure()
fig.savefig('zillow_pie.png')
return 'zillow_pie.png'
#+end_src

** quick pandas df examples:
more pandas notes to compliment numpy.org files too
*** Make a dataframe from a dictionary
#+begin_src python :results output
import pandas as pd
myData = {
    'x' : [1,2,3],
    'y' : [1,4,9],
    'z' : ['first','second','third']
}
df = pd.DataFrame(myData)
print(df, "\nmade a pandas dataframe!")
#+end_src

#+RESULTS:
:    x  y       z
: 0  1  1   first
: 1  2  4  second
: 2  3  9   third
: made a pandas dataframe!

*** Extract interesting things from a dataframe:

#+begin_src python :results output
import pandas as pd
import numpy as np
myData = {
    'x' : [1,2,3],
    'y' : [1,4,9],
    'z' : ['first','second','third']
}
df = pd.DataFrame(myData)

# extract columns of interest from a dataframe
xVals = df['x']
yVals = df['y']

# get the list of columns
cols = df.columns

# convert pd.Series to numpy
xData = xVals.to_numpy()
yData = yVals.to_numpy()
zData = df['z'].to_numpy() # single line it

# snag sections of a dataframe if you only care about certain columns:
df2 = df[['x', 'y']]

# snag the row that you want if you don't want a column:
row1 = df.iloc[1]
rows = df.iloc[[0,1]]
# equivalent
rows_cols = df.iloc[[0,1], 2]
rows_cols = df.loc[[0,1], 'z']
# print(rows)
# print(rows_cols, type(rows_cols))

# change the index for the dataframe, and access by new index
dfz = df.set_index('z')
print(dfz.loc['first'], '\n')
print(dfz.loc['first', 'x'], '\n')
# dfz.reset_index(inplace=True)
print(dfz, '\n')
#+end_src

#+RESULTS:
#+begin_example
x    1
y    1
Name: zfirst, dtype: int64

1

        x  y
z
zfirst  1  1
second  2  4
third   3  9

#+end_example

#+begin_src python :results file :session pd
import matplotlib.pyplot as plt
fig, ax = df2.plot()
fig.savefig('test.png')
return 'test.png'
#+end_src

#+RESULTS:
[[file:]]
*** Filtering data on DataFrames and Series objects

#+begin_src python :results output
import pandas as pd
myData = {
    'x' : [1,2,3],
    'y' : [1,4,9],
    'z' : ['first','second','third'],
    'letters' : ['a,b,c','b,c,d','a,d,e']
}
df = pd.DataFrame(myData)

# bool operators act on every item returned on the series
# xVals = df['x']

# gets another pandas.Series in filt..
# filt = (xVals != 2)

# get all of the df that match these condition
# print(df[filt])
# snag all of the 'x' values that pass the 'y' filter
# print(df.loc[filt, 'x'])

# combine filter experssions, logical expressions &, |
# filt = (df['x'] != 3) & (df['y'] < 7)
# negate search, grab extra columns
# print(df.loc[~filt, ['x', 'z']])

# isin list, column that matches a list of values that we want
# good_vals = ['first', 'third']
# filt = df['z'].isin(good_vals)
# df2 = df[filt]
# print(df2)

# item of df has string, and we want a substr component that matches, 'ir' is in both first and third but not second..
good_letters = df['letters'].str.contains('a')
print(df.loc[good_letters, ['x', 'y']])

#+end_src

#+RESULTS:
:    x  y
: 0  1  1
: 2  3  9
*** Changing data in your DataFrame

**** changing column names

#+begin_src python :results output
import pandas as pd
myData = {
    'x' : [1,2,3],
    'y' : [1,4,9],
    'z' : ['first','second','third'],
    'letters' : ['a,b,c','b,c,d','a,d,e']
}
df = pd.DataFrame(myData)

# changing column values
# print(df.columns)
# df.columns = ['a', 'b', 'c', 'alphabet']
# print(df.columns)

# str replace
df.columns = ['a poo', 'b', 'c', 'alphabet']
print(df.columns)
df.columns = df.columns.str.replace(" ", "_")
print(df.columns)

# rename replace
new_names = {
    'a_poo' : 'x_poo',
    'b' : 'y_poo',
    'c' : 'z_poo',
    'alphabet' : 'letter_poo'
}
df2 = df.rename(columns=new_names)
print(df2.columns) # new names
print(df.columns)  # use inplace=True to change

#+end_src

#+RESULTS:
: Index(['a poo', 'b', 'c', 'alphabet'], dtype='object')
: Index(['a_poo', 'b', 'c', 'alphabet'], dtype='object')
: Index(['x_poo', 'y_poo', 'z_poo', 'letter_poo'], dtype='object')
: Index(['a_poo', 'b', 'c', 'alphabet'], dtype='object')

**** changing values in rows of a df

#+begin_src python :results output
import pandas as pd
myData = {
    'x' : [1,2,3],
    'y' : [1,4,9],
    'z' : ['first','second','third'],
    'letters' : ['a,b,c','b,c,d','a,d,e']
}
df = pd.DataFrame(myData)



#+end_src

#+begin_src python :results output
import geopandas

#+end_src

*** Things you can put into a numpy array:


- apparently you can put whatever you want into an np array..

#+begin_src python :results output
import numpy as np

class poo():
    pass

ar = np.array(['hi', 1, float, poo])

print(ar, len(ar))

#+end_src

#+RESULTS:
: ['hi' 1 <class 'float'> <class '__main__.poo'>] 4
** sharing code blocks

#+name: savefig
#+begin_src python :var figname="plot.svg" width=5 height=5 :exports none
return f"""plt.savefig('{figname}', width={width}, height={height})
'{figname}'"""
#+end_src

#+header: :noweb strip-export
#+begin_src python :results value file :session :exports both
import matplotlib, numpy
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
<<savefig(figname="plot.png", width=10, height=5)>>
#+end_src

#+RESULTS:
[[file:plot.png]]


#+NAME: poop
#+begin_src python :var x=1 :results output :exports none
def square(x):
    return x**2

for x in [1,2,3]:
    print(square(x))
#+end_src

#+RESULTS: poop
: 1
: 4
: 9
** calc and org-tables

#+NAME: t_coordinates
| x |  y |   z |       exp |     sin | taylor                  |
|---+----+-----+-----------+---------+-------------------------|
| 1 |  1 |   1 | 2.7182818 | 1.8e-02 | taylor(1, x = 1.1, 3)   |
| 2 |  4 |   8 | 7.3890561 | 3.5e-02 | taylor(4, x = 4.1, 3)   |
| 3 |  9 |  27 | 20.085537 | 5.2e-02 | taylor(9, x = 9.1, 3)   |
| 4 | 16 |  64 | 54.598150 | 7.0e-02 | taylor(16, x = 16.1, 3) |
| 5 | 25 | 125 | 148.41316 | 8.7e-02 | taylor(25, x = 25.1, 3) |
#+TBLFM: $4=exp($1)
#+TBLFM: $5=sin($1);Dp3%0.1e
#+TBLFM: $6=taylor($2, x=$2, 3)
