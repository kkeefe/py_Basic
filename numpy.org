#+TITLE: Numpy
* Useful things learned:
** random
- make sure to include the results file option
#+BEGIN_SRC python :results file
import numpy as np
import matplotlib.pyplot as plt

# get an array of gaussian values, plot it and save it, then view it:
gaus = np.random.normal(5, 1, 1000)
plt.hist(gaus)
plt.savefig('images/gaus.png')
return 'images/gaus.png'

#+END_SRC

#+RESULTS:
[[file:images/gaus.png]]
** fits - SciPy
*** fitting histogram

#+BEGIN_SRC python :results file
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# normal distro
x = np.random.normal(5, 1, 100)
_, bins, _ = plt.hist(x, density=1)

mu, sigma = norm.fit(x)
best_fit_line = norm.pdf(bins, mu, sigma)
plt.plot(bins, best_fit_line)

plt.savefig("images/normFit.png")
return "images/normFit.png"

#+END_SRC

#+RESULTS:
[[file:images/normFit.png]]
** curve fit scipy
curve fitting with scipy
- define function
- get x and y 'random data'
*** fitting curve to data
#+BEGIN_SRC python :results file
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# function to fit
def gaus(x, mu, sigma):
    return 1 / np.sqrt(2*np.pi*sigma**2) * np.exp(-1*(x-mu)**2/(2*sigma**2))

# get some random values
x = np.linspace(-1, 1, 100)
y = gaus(x,np.mean(x),np.std(x)) # feed in to our gaus fnc
y_noise = np.random.normal(0,0.01,100) # include some 'noise' on this signal
y += y_noise

# fit data
popt, pcov = curve_fit(gaus, x, y)
# get the data back:
y_new = gaus(x, *popt)
# get the errors for our fit:
perr = np.sqrt(np.diag(pcov))

# histogram
plt.scatter(x, y, color='red')
f = lambda x : "{:.1E}".format(x) # formating with lambdas
plt.plot(x, y_new, label="error: %s +/- %s" % (f(perr[0]), f(perr[1])))
plt.legend()

plt.savefig("images/sciCurveFit.png")
return "images/sciCurveFit.png"

#+END_SRC

#+RESULTS:
[[file:images/sciCurveFit.png]]

** array values
#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(3)
return x

#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |

** linspace
#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0,4,5)
return x

#+END_SRC

#+RESULTS:
| 0 | 1 | 2 | 3 | 4 |
** Monte Carlo stuff and sessions
- get the basic equation to model
 
#+BEGIN_SRC python :results file
import numpy as np
import matplotlib.pyplot as plt

# set up the possible positions on the top bar
p1 = np.linspace(0,20,50)

# make the angle distribution "cos**2"
def make_cos2(p1):
    """given the initial top bar position, find the path"""
    pass

# get random point intersection
def get_muons(runs, pos):
    evts = []
    for i in range(runs):
        evts.append(np.random.choice(pos))

    # give back an np array
    return np.array(evts)

# make the limits [0,1)
def cos2(x):
    f = np.pi*x - np.pi/2
    return np.cos(f)**2

# random sampling
x = np.random.sample(size=100)
y = cos2(x)
acy = np.arccos(np.sqrt(x))
# plt.hist(y)
# plt.scatter(x, acy)
# plt.hist(acy, density=1)
plt.scatter(x,y)

plt.savefig("images/carlo.png")
return "images/carlo.png"

#+END_SRC

#+RESULTS:
[[file:images/carlo.png]]

** scipy and generating your own random variable sampler:
getting into it here..
#+BEGIN_SRC python :session carlo
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import rv_continuous

# subclassing rv_continuous
# make sure to define lower(a) and upper(b) bounds..
class gen_cont(rv_continuous):
    "cos^2 distro"
    def _pdf(self, x):
        # normalize and change the bounds for x in [0,1)
        return np.cos(x)**2 / (np.pi/2)

# random pdf
c2 = gen_cont(name="muon", a=-np.pi/2, b=np.pi/2)
x = np.linspace(-np.pi/2,np.pi/2,1000)
y = c2.rvs(size=1000)
pdf = c2.pdf(x)
cdf = c2.cdf(x)

#+END_SRC

#+RESULTS:
| <matplotlib.lines.Line2D | object | at | 0x12b2781c0> |

** calculating positions between bars with an angle theta
*** carlo setup
#+BEGIN_SRC python :session carlo
import numpy as np
import matplotlib.pyplot as plt

# let distances be measured in cm..
DIST = 7 * (0.1 + 0.5) # y-separation
LEN = 20  # bar length
# uncertainties for top and bottom bars
DX1 = 0.1
DX2 = 0.1
# how many total points we want
NUM_MUONS = 1_000

# create a set of a pair of points..
# see which pairs make full detection, and other's that don't
class PointPair():
    def __init__(self, x=0, y=0, theta=0):
        # create the first point info
        self.x1 = x
        self.y1 = y
        self.t1 = theta

        # get the second point info
        self.y2 = DIST + self.y1
        self.x2 = self.get_x2(theta)

        # check to see if the pairs make sense.
        if self.x2 < 0 or self.x2 > 20:
            self.good_pair = False
        else:
            self.good_pair = True

    def get_x2(self, theta):
        """expect that theta is in rads"""
        return self.x1 + DIST * np.tan(theta)

class EventPointPairs(PointPair):
    def __init__(self, x, y, t, dx1, dx2):
        # make the true point pair
        super().__init__(x=x,y=y,theta=t)

        # make the measured points information:
        self.mx1 = self.x1 + dx1
        self.mx2 = self.x2 + dx2
        self.t2 = self.get_theta2()

        # see if we got a good point here..
        if self.mx2 < 0 or self.mx2 > 20:
            self.measured_good_pair = False
        else:
            self.measured_good_pair = True

    def get_theta2(self):
        """give this back in radians"""
        return np.arctan((self.y2 - self.y1) / (self.mx2 - self.mx1))

    # get values of the bar separation
    def get_bar_diff(self, barNum=1):
        """count the bars downward, since muon enters from top"""
        y = DIST * barNum / 6
        return y * ((1/np.tan(self.t2)) - (1/np.tan(self.t1))) + self.mx1 - self.x1
np.random.seed(5)
x1 = 20 * np.random.sample(NUM_MUONS)
y1 = 0 * x1
thetas = c2.rvs(size=NUM_MUONS)
#+END_SRC

#+RESULTS:
: None

*** carlo implement
#+BEGIN_SRC python :results output :session carlo
np.random.seed(5)
# make the point errors:
dx1 = np.random.normal(0,DX1,NUM_MUONS)
dx2 = np.random.normal(0,DX2,NUM_MUONS)
good_evts = []
bad_evts = []
# make the points
for i in range(NUM_MUONS):
    p1 = EventPointPairs(x1[i],y1[i],thetas[i],dx1[i],dx2[i])
    if p1.good_pair and p1.measured_good_pair:
        good_evts.append(p1.get_bar_diff(1))
    else:
        bad_evts.append(p1)

y = np.array(good_evts)
print(y)
#+END_SRC

#+RESULTS:
#+begin_example
[-1.58883968e+00 -2.84797687e+00 -1.30829010e+00 -5.16081078e+01
 -1.27249123e+01  1.15249298e-01  7.44301592e-01  1.18250408e+00
 -1.18876962e+00  5.05066997e+00  9.09606048e+00 -7.47987058e-01
  9.03187602e-01 -6.87506170e-01 -1.43787251e+00 -2.55824931e+00
 -1.14143704e+01  3.51790388e+00  3.15309759e+02  1.40509862e+00
  1.56397114e-01  2.33055887e-01  4.66781157e-01 -1.62845493e+00
  1.28610040e+01 -3.06361413e+00  3.80265956e-01 -1.72848533e+00
  2.25530228e+00 -1.96273310e+00  2.68267704e+00 -6.35147131e-01
 -4.58888121e-01 -3.01502618e+00  1.56250399e+00  4.64656128e+00
  3.11348114e+00  6.68728594e-01 -2.79853074e-01 -3.41689741e+00
  9.08383412e+00 -3.04739467e+00 -1.84382565e+01  1.34691842e-01
  1.31965647e+01 -8.20516038e+01  2.46882258e-01  2.69187909e+00
  8.45427997e-01 -3.28579915e-02  4.65473034e+01 -1.26906760e+00
  2.10387287e-01  5.98473916e+00 -1.92169118e+00  2.04468727e+00
  1.65362315e+00 -3.18116827e+00 -1.51474482e+00 -7.12156483e+00
 -4.95825426e-01  7.94345133e+00 -4.49673850e-01 -7.38343543e-01
 -7.02885313e-01 -7.51579059e-02  2.08749121e+01 -4.52781245e+00
 -1.12189547e+01 -1.27984811e+00 -1.07262677e+00 -1.30546898e+00
  7.66097211e+01  7.14315873e-01 -8.76855699e+00 -1.86236830e+00
 -2.32015242e+00 -1.60192324e+01  5.40127169e+00 -1.79324579e+00
 -8.73715656e+00 -4.94145830e+00  1.29414425e-01 -2.46946005e+00
 -1.62081573e+00  4.51495397e+00 -1.69013454e+00  4.75796203e-01
 -1.36368700e+00 -8.42046797e-01  1.05926486e+00 -4.02665249e+00
  1.18104075e+00 -2.99605201e+00  3.66836929e+00  9.40461850e-01
 -6.41527400e-04  1.59437606e+00  1.68327753e-01 -9.95740262e-01
  5.25826555e+00  5.68047862e+00  1.58103966e+00  1.52807131e+00
  7.10323957e-01  2.20682890e+00  4.02065393e+00 -5.48497602e+01
 -2.02464325e+00  1.38905613e+00  1.93243290e+00  3.05659590e-01
 -7.78065371e+00 -3.47329142e-01 -8.45538676e+00 -3.30288112e-01
  5.73530272e+00  2.46703127e-01  2.46516363e+01  3.77689713e-01
 -4.78115444e-01  1.24199989e+01  8.41203333e-01  2.28787088e+01
  2.10738466e+00  2.21964785e-01  4.85483198e+00 -1.97909446e+00
  5.24981269e-02 -2.96826931e-01  1.29041627e+03  6.69831015e-02
 -7.10838922e-01 -1.16738937e+01  7.89003992e-01 -8.39820092e-01
  1.98844775e+00 -1.47403819e+00  2.31247429e+00 -1.17210924e+00
 -5.46934279e+00  1.47890132e+00 -1.13912521e+00  1.76987082e+00
  1.80166924e+01 -2.42634085e-01 -2.26362480e+00 -5.27115996e-01
 -3.91646613e+00 -3.62190150e+00  2.20716101e-01  1.02043566e+00
 -6.55502453e-01 -3.50537124e+00 -3.50675067e-01  1.58821745e+00
 -1.76942220e-01  7.91665506e-01  4.01570250e+00  8.56867659e-01
  6.71223524e-01  1.95439277e+00 -7.68549044e-02  3.60622996e+00
 -1.77132616e+01  1.38271869e+00 -2.91628090e+02 -2.37565537e+01
  7.46437306e-01  1.37925195e+00  5.37522196e+00  1.78667140e-01
 -3.40410341e+00 -5.43671212e+00 -7.99718402e-01 -5.60329414e+00
 -4.92573120e-01 -8.10683918e+00 -6.47924336e-01 -4.43501210e+01
 -1.79297095e+01 -2.44046199e+01 -9.53159576e-01  1.25159043e+01
  9.23505371e-01 -2.26508768e+00 -1.55629819e-01  1.19948661e+00
  4.24213864e+00  5.51697173e-01 -1.16555274e+00 -1.24900409e+00
  1.45721830e+01  1.92463201e-01  1.78132489e-02 -6.46167837e-01
 -2.48592742e+00 -1.17240921e+00 -3.21421521e-01  3.37451949e+01
 -1.06704971e+00 -9.42264902e+01 -4.39612767e-01  2.67417095e-01
  4.48129386e+00 -6.77381941e+00 -6.54023154e-01 -7.19408098e-01
  3.17859397e+00 -7.95962038e+00  7.26719485e+00  1.37212926e+00
  3.29770212e-01 -1.25766331e+01 -1.92548636e+00 -1.58218578e+00
 -7.69430690e-01 -1.34226716e+00  8.87420295e+00  5.23267560e-01
 -1.13917942e+01  4.58749975e+00  4.43630667e-02 -3.70159075e+00
 -5.77586047e-01 -1.30523659e+02  1.01281889e-01  1.54062773e+00
 -2.35544389e+00  2.04057236e-01 -3.25250483e+00  2.73475838e-02
  1.47568738e+00  7.43750311e-01 -2.41565281e+00 -1.18919563e+00
 -7.84018698e+00 -9.75883619e-01  5.78789931e-01  2.06258063e+01
  2.88585856e-02  2.33933139e+00 -2.31841013e-01 -1.20230988e+00
 -5.12903200e+00 -1.82065078e+00 -2.35368484e+01 -1.10496800e+00
  8.99953169e-01  1.02074480e+01 -7.36908876e-01 -9.92402582e+01
  8.97172950e+00  1.15848808e+00  4.99983185e-01 -2.97612407e+00
  3.03936152e-01  5.40036341e-01 -4.71540771e-01  1.41866732e+00
 -2.01954892e+00 -2.36718494e+01  7.81474065e-01 -6.20054441e+00
 -1.54112916e+00 -4.22447032e-02 -6.79039816e-01 -3.67675558e+00
 -2.07316718e-01 -7.91898481e-01 -3.86496360e+00 -6.42501378e-01
  2.31033588e+00  2.65024010e-02  2.06989608e-01  7.93884753e-01
  6.03957088e+00  5.98422433e-01 -2.45308903e+00  1.40062937e+01
  3.60399830e-01 -7.75001040e+01 -1.01446378e+00 -5.31251848e+00
  4.21588190e+00  2.83939354e-01 -3.78330248e-01  8.25051637e-01
  1.40708720e+00 -1.58651030e-01  1.80516640e+00  1.05600348e+00
  4.24018787e-01 -1.52774629e+00 -8.32333353e+00  1.16499769e+00
 -2.63639583e+00  2.63210222e+01 -3.85627999e+00 -3.22743964e+01
 -2.43264689e+00  1.26130041e+00  3.08595359e-02 -1.45047762e+00
 -2.13593809e+01  9.49723747e+00 -5.40539526e-01  1.72588657e+00
  8.36342355e+00 -1.99288420e+00 -7.71079379e+00 -1.42026449e+00
 -3.27385390e-01 -1.32837076e+00  1.36819756e+00  2.65365761e+00
 -2.75999157e+00 -8.98379656e+00  3.08398588e+00  4.49296403e-01
 -2.94945853e+00  1.12256349e+00  1.31750182e+00 -2.90971697e+00
  3.11382390e+00 -1.72688186e+00  6.03268218e+00  5.53879138e+00
  3.32179811e+00 -1.63603297e+01  9.47978928e-01  3.40432584e+00
 -2.72052083e-01  6.04134979e-01  3.80529300e+00 -4.03539116e-01
  3.85434961e+00 -6.50555596e-01 -1.68007329e+00  7.49940247e-01
 -4.46577309e-01 -2.84484602e+00 -3.42011400e+01 -2.60393792e+00
  1.23848172e+00  2.63151875e-01 -1.89759525e+00 -9.85926999e+00
  3.19763796e+00  4.23777122e+00  6.39857425e+00  4.43483908e-01
 -1.29412956e+01  3.04251502e+00 -2.36329666e+00 -6.76614331e-01
  1.25832029e+00 -5.87045148e-01 -5.58979291e+00  2.01010266e-01
 -3.29750190e+01  1.08314854e+00 -2.16563159e+00 -4.52779531e+01
 -1.34380045e+00 -4.40667701e+01  3.23384069e+00 -2.28043854e+00
  1.59820981e+00 -2.69920264e+00 -7.62196679e-01  1.20951596e+00
  1.52164115e+01  3.35069062e-01  7.31310871e-01  3.69117203e-01
 -1.05097747e+00  2.03849437e+00  7.61390566e+00  1.37352441e+00
 -1.80842242e-01  8.59036600e+01  3.06679453e+00 -1.50459409e+00
  3.08975519e+00  6.14661971e+00  5.37084277e+00 -2.91752370e+00
 -4.00609970e-03 -7.73510121e+00 -3.87197583e-01  4.86727958e-01
 -6.97938110e-01 -9.68572583e-01 -1.21993565e+00 -1.76854347e-01
 -6.44024466e+00 -5.78328876e+00 -5.12047505e-01 -3.71076980e+00
 -1.53443204e+00 -4.03020504e+00 -1.08809380e+00  9.44478849e-01
  3.22257136e-01 -1.26642541e+01  1.23252318e+00 -5.53508185e+00
 -1.07848360e+00 -3.52872007e-01 -8.94641182e-01 -2.67405967e+00
 -2.19529004e+00 -4.91100505e+00 -9.43501444e-01  3.16695592e+00
 -8.45656112e-01  1.45252960e+00  2.29537764e+00  1.66977070e-01
 -9.97882804e-01  1.41599054e+00  2.03562659e+00 -5.99732419e-01
  3.50927735e-01  1.19266506e+00  1.37203528e+00 -1.85957468e+00
 -7.98089963e-02 -1.16784488e+00  4.70974362e-03 -1.40048472e+01
 -4.24946344e+00  1.86380046e+00  7.21299786e+00 -3.58880282e+00
  4.08690511e-01 -2.21070817e+00 -4.20134932e+00 -2.47661644e+00
 -1.48087741e+00  1.59904811e+00  8.84714414e+00 -5.47538399e+00
  1.02222445e+00 -1.67008364e+01  9.89775096e+00 -1.40103655e+00
 -3.64856855e-01 -3.68586979e-01  4.40645032e-01 -2.55349077e+00
  1.43083549e+00  5.39274684e+00  5.21932970e-01  2.95430987e+00
  2.23671727e+00 -2.47126796e+00  1.19619180e+00 -5.65518911e+00
 -2.41153961e-01 -2.40559519e+00 -8.86024158e-01  7.50811072e-02
 -1.78433496e+00 -1.06738056e+01 -3.53938214e+00 -1.78006156e+00
  3.40326864e+00 -1.66441105e-02 -2.63155515e+00 -2.12512723e+00
  5.81902410e+00 -1.76471551e+01 -3.92305309e+00 -2.45568286e+01
 -1.30563539e+00  1.63060007e+00  2.07950255e+00  1.05954822e+00
  3.40936485e-02 -1.33612905e+00  7.75565978e-01  3.98923920e-01
 -9.25970973e+00 -2.93099045e+01 -1.90403393e+01  9.87714436e-01
 -2.14621367e+00 -1.05362151e+01  1.53619183e+00 -1.59012431e+00
 -1.26042872e-01 -1.19880983e+00  2.88516914e+00 -1.55974087e+00
 -7.33255753e+00  1.48623536e+00  4.36659274e+00 -1.95069177e+00
  4.22998498e+00 -1.23320089e-01 -4.55222545e-01 -1.60194871e+00
 -1.42464362e+00 -1.09401533e+00  2.19240256e+00 -3.28563642e+00
  4.77589197e+00 -6.06308432e-01 -1.39242736e+00 -1.81423158e+01
  2.27690009e+00 -3.49478416e-01  7.82268375e+00 -3.83547589e+00
  3.66927621e+00 -1.05500604e+00 -3.90446193e+00  7.53874970e+00
 -5.59869879e-01  1.08562626e+00  3.39895576e-02 -6.86231806e-01
 -5.79088414e-01 -2.86595304e+00 -1.15637209e+00 -1.24748905e+00
  4.86906451e-01  3.26877956e+00 -7.56061979e-01 -6.02142801e-01
 -2.09685145e+01  1.59657774e+00 -2.86131933e-01  3.09193271e-01
 -1.88635213e-01 -1.21273015e+00 -2.20317243e+00 -2.66623828e+00
  7.11418732e+00 -4.07805755e+00 -5.59713027e-01 -1.73686297e+00
  1.35310493e+00 -7.98526036e-01  1.34974689e+00  7.82747865e-01
  4.93849029e-01 -4.20693362e-01  3.85655958e-01  1.11100836e+00
 -1.76179351e+00  5.11566246e-02  4.84366685e-01 -1.86833117e+01
  4.37423845e+00 -9.70623811e-01  4.27263484e-02 -2.03937746e+00
  3.50150717e-01 -6.44246799e-01  5.25455955e-01 -1.95016835e+00
  3.18594424e+01  1.58385046e+00  4.57670716e+00  1.70543199e+00
 -1.47733953e+00  1.97392080e+00  6.33390934e-01  9.89268026e-01
  5.66786858e+00  2.43467483e-01 -2.62224325e+00  2.14549265e+00
  3.51654812e+00 -5.84421810e-01  4.93390309e+00  1.84127090e+00
 -1.94790153e+00  3.79473418e+00 -1.12217740e+00  1.07797389e+00
 -5.66691509e+00 -5.92703223e-01 -5.35129155e-01 -1.95072931e-01
 -4.99621566e-01 -7.64905859e-01 -5.85075259e+00  1.81196398e+00
 -3.95739810e+00  2.73083836e+00  4.15910916e+00 -9.54633389e+00
 -9.69096549e-01  1.09783688e+00 -5.81286384e+00  2.78366075e+00
  2.42415955e+01 -2.48311556e+00 -6.08155063e+00  5.12426306e+00
  1.66774980e+00  2.55380912e+00  2.82251002e+00  1.11774911e+00
 -2.16085962e+00  6.02159285e+00  2.57333396e+00  5.02459398e+00
  1.66397768e+00  3.95735837e+00 -2.32591328e-01  8.26050010e-01
  5.27566022e-01 -9.34639938e-02 -1.98736950e+00 -1.52678068e+00
  2.75099155e+00 -6.49774043e+00  2.53706183e+00  1.53762433e+01
 -1.51719116e-01 -6.62667331e-01  3.47408025e+00  3.99500283e+00
  5.06443009e-01 -6.46261161e+00  2.71201886e-01 -1.97697722e-01
 -3.52487846e-01 -5.81565107e-01 -7.92734780e-01  1.86103857e+00
  1.06580152e+00  4.76531619e+00  4.59096937e-01 -1.02062627e+00
 -1.56975506e+01 -2.77999716e-01  9.27636776e+00  2.69732253e+00
 -7.16097801e-01  3.22116748e+01  7.39814959e+00  4.46159786e-01
 -1.03907252e+00  6.21312681e-01 -9.14364782e-01  8.41832767e-01
  7.82169605e-01 -3.18268734e+00  7.34974765e+00 -9.41215955e-01
  7.55506777e-01 -8.23815254e-03  1.04686767e+00  1.44621841e+00
  6.60772147e-01  1.85627080e+00 -3.90545639e-01 -1.35148543e+00
 -3.25718341e-01 -9.81018044e-02  1.62045794e+01  3.53600677e+00
 -2.42520197e+00 -6.37660866e-02 -4.02629785e+00 -4.77903217e-01
 -1.84626989e-01  1.96625823e+01  5.22799468e+00  1.80824156e+01
  2.10277307e+00  6.57190669e-01 -1.38163397e+00  4.24559800e-01
 -3.32817490e+01  2.44308966e+00  1.91161819e-01 -2.83933928e+00
  6.85792130e-01 -8.95240706e-01  7.09373060e+00  2.29319523e+00
 -2.77387486e+00 -2.66793119e-01 -8.28806527e-01 -2.18675598e+00
 -2.08182726e-01  4.42478346e+00 -1.47089261e+00 -8.82289393e-02
 -1.39829297e+00  2.66050667e+00  2.30965915e+00 -3.06644145e+00
  2.03848073e+00  8.61179004e-01 -1.55258597e+00  5.43517563e-03
  2.41393868e-01 -3.41699895e+00 -1.99684212e+01 -4.09032046e-01
 -1.75540479e+01  3.01671851e-01 -2.86535370e+00 -5.63220189e-01
  9.88414208e-03  1.85942169e+01 -1.58780863e+00 -5.39236053e+00
 -3.95435179e-01 -3.93915338e+00 -6.01463703e-01 -1.79073416e+00
  7.41575509e+00 -4.41150026e-01  7.87324577e+00  3.46986102e+00
  4.52063811e-01 -1.85808068e+01 -7.05290587e-01  2.43714692e+00
  9.49660965e-01  4.22368423e+00  3.50830815e-01 -1.34660971e+00
 -2.54323520e+00 -2.03545587e+00  2.79307078e-01  1.59689373e+00
 -4.36945885e-01 -6.51779083e+00  5.50122949e-01 -2.03657577e-01
 -2.16948054e+00 -1.05440080e+00  9.34378419e-01  8.35049785e-01
 -2.16372487e-01  2.64130802e+01  2.64474683e+00 -5.39813484e-01
  9.94693936e-01  1.57872394e+00  4.37281575e-01  3.01902960e-01
  1.14762212e+00 -1.35719309e+00  1.02647814e+00  1.98998057e-01
  1.74901128e+00  8.08813415e+00 -4.03781559e-01 -5.62433387e-01
  3.59866347e+00  7.21485652e+00 -2.56308094e-01  1.81993810e-01
  1.10549154e+00  7.72838896e-01 -3.44163962e-01  1.07196954e+00
  7.01856350e-01 -3.57043616e-01  7.49823645e-01  3.98449518e+00
  8.23305095e-01  7.39821381e-01  4.37408783e+01 -3.39632719e-01
 -6.43057044e-01  1.41179282e+00 -4.14063271e-01  1.02349617e+00
 -4.96006371e+01  8.01993699e+00 -2.73149786e+00 -1.70789398e+01
  1.56342832e+00 -1.07727308e+01  1.50524353e+01 -2.56156830e+01
 -3.65341962e-01 -7.20457306e-01  5.25446376e+00  7.10496516e+00
  1.18812659e+00  2.15704204e-01  1.51550071e+00 -7.33985573e+00
  5.69574965e+00 -8.12659698e-02  1.96943070e-01  9.95972658e-01
 -1.26674347e+00  1.02186294e+00  7.35025867e-01 -3.31452119e+00
  2.22159677e+00  1.98506295e+00  7.81826887e-01 -5.67491672e-01
  6.24217260e-01 -3.85999590e-01  1.24397029e+00 -7.61476425e-01
  1.36285536e-01  9.74268289e+00  1.76480034e+00  3.86469963e+00
  1.08206802e+01  4.78078447e+00 -3.50090421e-02  6.38201085e+00
 -8.27350881e-01  1.52566808e+02 -3.43224031e-01 -2.85208749e-01
  5.93334116e-01 -4.39681093e-01  7.77268992e-02  2.32822369e+00
 -2.93543181e+00 -5.54382431e-01  1.45533452e+00  6.38861933e+00
  2.87546463e+00 -2.96455819e-01 -7.77260282e+00 -4.44228690e+01
  9.81846541e+00 -1.67328834e+00 -1.90688476e-01  1.38651528e-01
 -1.51785562e+00  4.78194273e+00 -5.05083344e+00  4.14177040e+00
 -2.07474000e-01 -2.47911839e+00  4.53264083e+00 -4.60465722e-01
  3.74230168e-01 -5.24451843e+00 -1.18916573e-01 -1.66296773e-01
  6.93353025e-02 -2.25648312e+00 -7.79423132e-01  1.74715801e+01
 -6.66521345e-01  1.46822363e+00  2.97622659e+02  2.52799510e-01
 -2.60719309e+00 -2.45789460e-01 -2.71853219e+00 -1.48853076e+00
 -2.51129106e+00 -1.06394084e+00 -8.45473531e-02 -1.60117651e-01
 -6.13210408e-01 -2.33807543e+00  2.61722291e+00  8.55128227e-01
 -8.80560949e-01 -1.75828870e-01  4.59154405e+01 -1.69476518e+01
  4.38651086e+00]
#+end_example


*** graphing our values
#+BEGIN_SRC python :session carlo :results output
plt.hist(y)
#+END_SRC

#+BEGIN_SRC python :results file
return "images/carloSession.png"
#+END_SRC

#+RESULTS:
[[file:images/carloSession.png]]

** iter on user fnc
#+BEGIN_SRC python :results output
import numpy as np
def printer(x, b):
    return x*b
x = np.arange(3)
print(x)
val = printer(x,1)
print(val)
#+END_SRC

#+RESULTS:
: [0 1 2]
: [0 1 2] 1
: [0 1 2]
* More things to practice:
** getting started with c++
#+begin_src C++ :includes <iostream> :results output
auto val = 5+2;
std::cout << "hello world! " << val << "\n";
#+end_src

#+RESULTS:
: hello world! 7

** more advanced with c++

#+begin_src C++ :includes [list '<iostream>' '<vector>'] :results output
auto val = 5+2;
std::cout << "hello world! " << val << "\n";
#+end_src
